library(dplyr)
library(plotly)
summary <- c('number of shootings' = num.shootings, 'number of people killed' =  num.killed, 'number of people injured' = num.injured, flatten(state.most.deaths), flatten(city.most.deaths))
?flatten
library(jsonlite)
summary <- c('number of shootings' = num.shootings, 'number of people killed' =  num.killed, 'number of people injured' = num.injured, flatten(state.most.deaths), flatten(city.most.deaths))
summary
```{r, echo=FALSE, include=FALSE}
library(dplyr)
library(plotly)
library(jsonlite)
Mass.Shooting.Data <- read.csv("~/GitHub/a6-mapping-shootings-lukasg33/data/Mass-Shooting-Data.csv", stringsAsFactors = FALSE)
num.shootings <- nrow(Mass.Shooting.Data)
num.killed <-  sum(Mass.Shooting.Data$killed)
num.injured <- sum(Mass.Shooting.Data$injured)
city.most.deaths <-  group_by(Mass.Shooting.Data, city) %>%
summarise(killed = sum(killed)) %>%
filter(killed == max(killed))
state.most.deaths <-  group_by(Mass.Shooting.Data, state) %>%
summarise(killed = sum(killed)) %>%
filter(killed == max(killed))
city.shooting <- filter(Mass.Shooting.Data, city == 'Seattle')
summary <- c('number of shootings' = num.shootings, 'number of people killed' =  num.killed, 'number of people injured' = num.injured, flatten(state.most.deaths), flatten(city.most.deaths))
summary
View(summary)
summary <- c('number of shootings' = num.shootings, 'number of people killed' =  num.killed, 'number of people injured' = num.injured)
summary
summary <- c('number of shootings' = num.shootings, 'number of people killed' =  num.killed, 'number of people injured' = num.injured, 'state with the most deaths' = flatten(state.most.deaths), 'city with the most deaths' = flatten(city.most.deaths))
summary
View(summary)
summary <- c('number_of_shootings' = num.shootings, 'number_of_people_killed' =  num.killed, 'number_of_people_injured' = num.injured, 'state_with_the_most_deaths' = flatten(state.most.deaths), 'city_with_the_most_deaths' = flatten(city.most.deaths))
View(summary)
summary <- c('number_of_shootings' = num.shootings, 'number_of_people_killed' =  num.killed, 'number_of_people_injured' = num.injured, 'state_with_the_most_deaths' = flatten(state.most.deaths), 'city_with_the_most_deaths' = flatten(city.most.deaths))
library(knitr)
View(summary)
summary <- as.data.frame(c('number_of_shootings' = num.shootings, 'number_of_people_killed' =  num.killed, 'number_of_people_injured' = num.injured, 'state_with_the_most_deaths' = flatten(state.most.deaths), 'city_with_the_most_deaths' = flatten(city.most.deaths)))
View(summary)
summary <- as.data.frame(c('number_of_shootings' = num.shootings, 'number_of_people_killed' =  num.killed, 'number_of_people_injured' = num.injured, 'state_most_deaths' = flatten(state.most.deaths), 'city__most_deaths' = flatten(city.most.deaths)))
city.shooting.filter <- function(city){
city.shooting <-  filter(Mass.Shooting.Data, city == 'city')
return(city.shooting)
}
city.shooting <- city.shooting.filter('Seattle')
city.shooting
city.shooting.filter <- function(city){
city.shooting <-  filter(Mass.Shooting.Data, city == city)
return(city.shooting)
}
city.shooting <- city.shooting.filter('Seattle')
View(city.shooting)
city.shooting.filter <- function(city){
city.shooting <-  filter(Mass.Shooting.Data, city == city)
return(city.shooting)
}
city.shooting <- city.shooting.filter("Seattle")
city.shooting
city.shooting.filter('Seattle')
city.shooting.filter <- function(city){
answer <-  filter(Mass.Shooting.Data, city == city)
return(answer)
}
city.shooting <- city.shooting.filter('Seattle')
city.shooting
seattle.shooting <- city.shooting.filter('Seattle')
seattle.shooting
city.shooting.filter <- function(city){
answer <-  filter(Mass.Shooting.Data, city == 'Seattle')
return(answer)
}
city.shooting.filter('ss')
city.shooting.filter <- function(city){
answer <-  filter(Mass.Shooting.Data, city == city)
return(answer)
}
seattle.shooting <- city.shooting.filter('Seattle')
seattle.shooting
city.shooting.filter <- function(city){
answer <-  filter_(Mass.Shooting.Data, city == city)
return(answer)
}
seattle.shooting <- city.shooting.filter('Seattle')
seattle.shooting
city.shooting.filter <- function(input.city){
answer <-  filter_(Mass.Shooting.Data, city == input.city)
return(answer)
}
seattle.shooting <- city.shooting.filter('Seattle')
city.shooting.filter <- function(input.city){
answer <-  filter(Mass.Shooting.Data, city == input.city)
return(answer)
}
seattle.shooting <- city.shooting.filter('Seattle')
View(seattle.shooting)
state.data
View(state.data)
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
state_line
install.packages("ggplot2")
library(ggplot2)
library(dplyr)
install.packages("data.table")
library(data.table)
load("suicides.rdata")
all.suicides <- copy(suicides)
suicides <- suicides %>%
group_by(year,state,means) %>%
mutate(deaths = sum(deaths))
bare <- ggplot(suicides)
#adding plot aethetics
aesthetic <- ggplot(suicides, aes(x=year, y=deaths))
scatter <-  ggplot(suicides, aes(x=year, y=deaths)) +
geom_point()
## split means by color
color_by_means <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_point()
##facet by state
state_fact <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_point() +
facet_wrap(~state, scales = "free")
##line plot
state_line <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_line(size = 3) +
facet_wrap(~state, scales = "free")
install.packages("ggplot2")
state_line
##line plot
state_line <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_line(size = 3) +
facet_wrap(~state, scales = "free")
library(ggplot2)
library(dplyr)
install.packages("data.table")
library(data.table)
load("suicides.rdata")
all.suicides <- copy(suicides)
suicides <- suicides %>%
group_by(year,state,means) %>%
mutate(deaths = sum(deaths))
bare <- ggplot(suicides)
#adding plot aethetics
aesthetic <- ggplot(suicides, aes(x=year, y=deaths))
scatter <-  ggplot(suicides, aes(x=year, y=deaths)) +
geom_point()
## split means by color
color_by_means <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_point()
##facet by state
state_fact <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_point() +
facet_wrap(~state, scales = "free")
##line plot
state_line <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_line(size = 3) +
facet_wrap(~state, scales = "free")
library(ggplot2)
library(dplyr)
install.packages("data.table")
library(data.table)
load("suicides.rdata")
all.suicides <- copy(suicides)
suicides <- suicides %>%
group_by(year,state,means) %>%
mutate(deaths = sum(deaths))
bare <- ggplot(suicides)
#adding plot aethetics
aesthetic <- ggplot(suicides, aes(x=year, y=deaths))
scatter <-  ggplot(suicides, aes(x=year, y=deaths)) +
geom_point()
## split means by color
color_by_means <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_point()
##facet by state
state_fact <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_point() +
facet_wrap(~state, scales = "free")
##line plot
state_line <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_line(size = 3) +
facet_wrap(~state, scales = "free")
install.packages("data.table")
shiny::runApp('GitHub/drugs-visualization')
setwd("~/GitHub/drugs-visualization")
#source('lukas_map.r')
summary.data <- read.csv('summary.data.csv', stringsAsFactors = FALSE)
source('source.r')
source('source.r')
runApp()
library(dplyr)
library(plotly)
library(maps)
library(shiny)
source('source.R')
#summary.data <- read.csv('./summary.data.csv', stringsAsFactors = FALSE)
shinyServer(function(input, output) {
output$map <- renderPlot({
selected.data <- switch (input$Drug,
"Cocaine" = filter(summary.data, Drug.Name == "Cocaine"),
"Heroin"= filter(summary.data, Drug.Name == "Heroin"),
"Cannabis Herb (Marijuana)" = filter(summary.data, Drug.Name == "Cannabis Herb (Marijuana)")
)
map("world", regions= ".", mar = c(.5,.5,.5,.5))
points(x = selected.data$long.country.obtained, y = selected.data$lat.country.obtained, col = "red")
points(x =  selected.data$long.destination.country, y = selected.data$lat.destination.country, col = "red")
arrows(x0 = selected.data$long.country.obtained, y0 = selected.data$lat.country.obtained, x1 = selected.data$long.destination.country, y1 = selected.data$lat.destination.country, col = "red", lwd = .5)
})
})
library(shiny)
library(plotly)
#setwd("~/GitHub/drugs-visualization")
source('source.R')
#drug.data <- read.csv('./data/2011-2015_Drug_data.csv', stringsAsFactors = FALSE)
summary.data <- read.csv('./summary.data.csv', stringsAsFactors = FALSE)
shinyUI(navbarPage('Drug Distribution from 2011 to 2015',
tabPanel('Home-Lukas',
titlePanel('Map of Drug Trafficking Routes'),
sidebarLayout(
sidebarPanel(
radioButtons('Drug', 'Drug', choices = unique(summary.data$Drug.Name))
),
mainPanel(
plotOutput("map")
)
)
),
tabPanel('Test2',
titlePanel('In progress'),
sidebarLayout(
sidebarPanel(
),
mainPanel(
)
)
)
))
summary.data <- read.csv("summary.data.csv", stringsAsFactors = FALSE)
summary.data <- read.csv("summary.data.csv", stringsAsFactors = FALSE)
View(summary.data)
runApp()
View(drug.data)
drug.data <- read.csv("2011-2015_Drug_data.csv", stringsAsFactors = FALSE)
drug.data <- read.csv("./data/2011-2015_Drug_data.csv", stringsAsFactors = FALSE)
View(drug.data)
View(drug.data)
drug.data <- read.csv("./data/2011-2015_Drug_data.csv", stringsAsFactors = FALSE)
View(drug.data)
converted.data <- drug.data
?mutate
##Unit converstion
if(drug.data$Drug.Unit == "Gram"){
converted.data <- drug.data
mutate(converted.data, Adjusted.Amount = Amount/100)
}
?lapply
install.packages('measurements')
library(measurements)
drug.data <- read.csv("./data/2011-2015_Drug_data.csv", stringsAsFactors = FALSE)
View(drug.data)
kilo.data <- filter(drug.data, Drug.Unit == 'Kilogram')
?replace
view(kilo.data)
View(kilo.data)
drug.data <- read.csv('./data/2011-2015_Drug_data.csv', stringsAsFactors = FALSE)
kilo.data <- filter(drug.data, Drug.Unit == 'Kilogram')
kilo.data <- filter(drug.data, Drug.Unit == 'Kilogram')
View(summary.data)
not.unknown <- filter(drug.data, Country.obtained...Departure.Country != 'Unknown' &  Country.obtained...Departure.Country != "")
View(not.unknown)
not.unknown <- filter(drug.data, Country.obtained...Departure.Country != 'Unknown' &  Country.obtained...Departure.Country != "") %>%
filter(Destination.Country != 'Unknown' & Destination.Country != "")
View(not.unknown)
not.unknown <- filter(selected.data, Country.obtained...Departure.Country != "" & Country.obtained...Departure.Country != "Unknown") %>%
filter(Destination.Country != "" & Destination.Country != "Unknown")
drug.data <- read.csv('./data/2011-2015_Drug_data.csv', stringsAsFactors = FALSE)
drugs <- c('Cocaine', 'Heroin', 'Cannabis Herb (Marijuana)')
#filters out big 3
selected.data <- drug.data %>%  filter(Drug.Name %in%  drugs )
#filters out unknown origin country and filters to only countries in the americas
#no unknowns or blanks in Country obtained and Destination country
not.unknown <- filter(selected.data, Country.obtained...Departure.Country != "" & Country.obtained...Departure.Country != "Unknown") %>%
filter(Destination.Country != "" & Destination.Country != "Unknown")
View(not.unknown)
drug.data <- read.csv('./data/2011-2015_Drug_data.csv', stringsAsFactors = FALSE)
drugs <- c('Cocaine', 'Heroin', 'Cannabis Herb (Marijuana)')
#filters out big 3
selected.data <- drug.data %>%  filter(Drug.Name %in%  drugs )
#filters out unknown origin country and filters to only countries in the americas
#no unknowns or blanks in Country obtained and Destination country
not.unknown <- filter(selected.data, Country.obtained...Departure.Country != "" & Country.obtained...Departure.Country != "Unknown") %>%
filter(Destination.Country != "" & Destination.Country != "Unknown")
#bolivia's full name was not being recognized by the geocode function
not.unknown$Country.obtained...Departure.Country <- gsub("Bolivia, Plurinational State of", "Boliva", not.unknown$Country.obtained...Departure.Country)
#returns a dataframe with the long lat coordinates of each specified country for the countries where the drugs were obtained
lonlat.country.obtained <- geocode(unique(not.unknown$Country.obtained...Departure.Country)) %>%
mutate(unique(not.unknown$Country.obtained...Departure.Country))
#edits column names so that the join will work also for clarity
colnames(lonlat.country.obtained) <- c('long.country.obtained', 'lat.country.obtained', 'Country.obtained...Departure.Country')
#joins the long lat location with the corresponding counties in our main data set
final.data <- full_join(not.unknown, lonlat.country.obtained, by ='Country.obtained...Departure.Country')
#returns coordinates of the countries in the Destination Country column
lonlat.destination.country <- geocode(unique(not.unknown$Destination.Country)) %>%
mutate(unique(not.unknown$Destination.Country))
colnames(lonlat.destination.country) <- c('long.destination.country', 'lat.destination.country', 'Destination.Country')
#joins the long lat location with the corresponding counties in our main data set
final.data <- full_join(final.data, lonlat.destination.country, by ='Destination.Country') %>%
filter(Country.obtained...Departure.Country != Destination.Country)
#summarydata
summary.data <- unique(final.data[, c('Drug.Name','Country.obtained...Departure.Country', 'Destination.Country', 'long.country.obtained','lat.country.obtained','long.destination.country', 'lat.destination.country')])
drug.data <- read.csv('./data/2011-2015_Drug_data.csv', stringsAsFactors = FALSE)
drugs <- c('Cocaine', 'Heroin', 'Cannabis Herb (Marijuana)')
#filters out big 3
selected.data <- drug.data %>%  filter(Drug.Name %in%  drugs )
not.unknown <- filter(selected.data, Country.obtained...Departure.Country != "" & Country.obtained...Departure.Country != "Unknown") %>%
filter(Destination.Country != "" & Destination.Country != "Unknown")
not.unknown$Country.obtained...Departure.Country <- gsub("Bolivia, Plurinational State of", "Boliva", not.unknown$Country.obtained...Departure.Country)
lonlat.country.obtained <- geocode(unique(not.unknown$Country.obtained...Departure.Country)) %>%
mutate(unique(not.unknown$Country.obtained...Departure.Country))
library(dplyr)
library(ggplot2)
library(ggmap)
library(plotrix)
library(plotly)
library(maps)
#returns a dataframe with the long lat coordinates of each specified country for the countries where the drugs were obtained
lonlat.country.obtained <- geocode(unique(not.unknown$Country.obtained...Departure.Country)) %>%
mutate(unique(not.unknown$Country.obtained...Departure.Country))
#edits column names so that the join will work also for clarity
colnames(lonlat.country.obtained) <- c('long.country.obtained', 'lat.country.obtained', 'Country.obtained...Departure.Country')
#joins the long lat location with the corresponding counties in our main data set
final.data <- full_join(not.unknown, lonlat.country.obtained, by ='Country.obtained...Departure.Country')
#returns coordinates of the countries in the Destination Country column
lonlat.destination.country <- geocode(unique(not.unknown$Destination.Country)) %>%
mutate(unique(not.unknown$Destination.Country))
colnames(lonlat.destination.country) <- c('long.destination.country', 'lat.destination.country', 'Destination.Country')
#joins the long lat location with the corresponding counties in our main data set
final.data <- full_join(final.data, lonlat.destination.country, by ='Destination.Country') %>%
filter(Country.obtained...Departure.Country != Destination.Country)
#summarydata
summary.data <- unique(final.data[, c('Drug.Name','Country.obtained...Departure.Country', 'Destination.Country', 'long.country.obtained','lat.country.obtained','long.destination.country', 'lat.destination.country')])
#returns coordinates of the countries in the Destination Country column
lonlat.destination.country <- geocode(unique(not.unknown$Destination.Country)) %>%
mutate(unique(not.unknown$Destination.Country))
colnames(lonlat.destination.country) <- c('long.destination.country', 'lat.destination.country', 'Destination.Country')
not.unknown$Country.obtained...Departure.Country <- gsub("Tanzania, United Republic of", "Tanzania", not.unknown$Country.obtained...Departure.Country)
not.unknown$Country.obtained...Departure.Country <- gsub("Tanzania, United Republic of", "Tanzania", not.unknown$Country.obtained...Departure.Country)
not.unknown$Country.obtained...Departure.Country <- gsub("Macedonia, the former Yugoslav Republic of", "Macedonia", not.unknown$Country.obtained...Departure.Country)
lonlat.country.obtained <- geocode(unique(not.unknown$Country.obtained...Departure.Country)) %>%
mutate(unique(not.unknown$Country.obtained...Departure.Country))
#edits column names so that the join will work also for clarity
colnames(lonlat.country.obtained) <- c('long.country.obtained', 'lat.country.obtained', 'Country.obtained...Departure.Country')
#joins the long lat location with the corresponding counties in our main data set
final.data <- full_join(not.unknown, lonlat.country.obtained, by ='Country.obtained...Departure.Country')
#returns coordinates of the countries in the Destination Country column
lonlat.destination.country <- geocode(unique(not.unknown$Destination.Country)) %>%
mutate(unique(not.unknown$Destination.Country))
colnames(lonlat.destination.country) <- c('long.destination.country', 'lat.destination.country', 'Destination.Country')
#joins the long lat location with the corresponding counties in our main data set
final.data <- full_join(final.data, lonlat.destination.country, by ='Destination.Country') %>%
filter(Country.obtained...Departure.Country != Destination.Country)
#summarydata
summary.data <- unique(final.data[, c('Drug.Name','Country.obtained...Departure.Country', 'Destination.Country', 'long.country.obtained','lat.country.obtained','long.destination.country', 'lat.destination.country')])
lonlat.country.obtained
not.unknown$Destination.Country <- gsub("Tanzania, United Republic of", "Tanzania", not.unknown$Country.obtained...Departure.Country)
not.unknown$Destination.Country <- gsub("Macedonia, the former Yugoslav Republic of", "Macedonia", not.unknown$Country.obtained...Departure.Country)
#returns coordinates of the countries in the Destination Country column
lonlat.destination.country <- geocode(unique(not.unknown$Destination.Country)) %>%
mutate(unique(not.unknown$Destination.Country))
colnames(lonlat.destination.country) <- c('long.destination.country', 'lat.destination.country', 'Destination.Country')
#joins the long lat location with the corresponding counties in our main data set
final.data <- full_join(final.data, lonlat.destination.country, by ='Destination.Country') %>%
filter(Country.obtained...Departure.Country != Destination.Country)
#summarydata
View(final.data)
not.unknown$Destination.Country <- gsub("Kosovo under UNSCR 1244", "Kosovo", not.unknown$Destination.Country)
library(dplyr)
library(ggplot2)
library(ggmap)
library(plotrix)
library(plotly)
library(maps)
setwd("~/GitHub/drugs-visualization")
drug.data <- read.csv('./data/2011-2015_Drug_data.csv', stringsAsFactors = FALSE)
drugs <- c('Cocaine', 'Heroin', 'Cannabis Herb (Marijuana)')
#filters out big 3
selected.data <- drug.data %>%  filter(Drug.Name %in%  drugs )
#filters out unknown origin country and filters to only countries in the americas
#no unknowns or blanks in Country obtained and Destination country
not.unknown <- filter(selected.data, Country.obtained...Departure.Country != "" & Country.obtained...Departure.Country != "Unknown") %>%
filter(Destination.Country != "" & Destination.Country != "Unknown")
#bolivia's full name was not being recognized by the geocode function
not.unknown$Country.obtained...Departure.Country <- gsub("Bolivia, Plurinational State of", "Boliva", not.unknown$Country.obtained...Departure.Country)
not.unknown$Destination.Country <- gsub("Tanzania, United Republic of", "Tanzania", not.unknown$Destination.Country)
not.unknown$Destination.Country <- gsub("Macedonia, the former Yugoslav Republic of", "Macedonia", not.unknown$Destination.Country)
not.unknown$Destination.Country <- gsub("Kosovo under UNSCR 1244", "Kosovo", not.unknown$Destination.Country)
#returns a dataframe with the long lat coordinates of each specified country for the countries where the drugs were obtained
lonlat.country.obtained <- geocode(unique(not.unknown$Country.obtained...Departure.Country)) %>%
mutate(unique(not.unknown$Country.obtained...Departure.Country))
#edits column names so that the join will work also for clarity
colnames(lonlat.country.obtained) <- c('long.country.obtained', 'lat.country.obtained', 'Country.obtained...Departure.Country')
#joins the long lat location with the corresponding counties in our main data set
final.data <- full_join(not.unknown, lonlat.country.obtained, by ='Country.obtained...Departure.Country')
#returns coordinates of the countries in the Destination Country column
lonlat.destination.country <- geocode(unique(not.unknown$Destination.Country)) %>%
mutate(unique(not.unknown$Destination.Country))
colnames(lonlat.destination.country) <- c('long.destination.country', 'lat.destination.country', 'Destination.Country')
#joins the long lat location with the corresponding counties in our main data set
final.data <- full_join(final.data, lonlat.destination.country, by ='Destination.Country') %>%
filter(Country.obtained...Departure.Country != Destination.Country)
#summarydata
summary.data <- unique(final.data[, c('Drug.Name','Country.obtained...Departure.Country', 'Destination.Country', 'long.country.obtained','lat.country.obtained','long.destination.country', 'lat.destination.country')])
write.csv(summary.data, file = "summary.data.csv")
#amount summmary data
#unit summary data
kilo.data <- filter(drug.data, Drug.Unit == 'Kilogram')
not.unknown <- filter(cocaine.data, Country.obtained...Departure.Country != "" & Country.obtained...Departure.Country != "Unknown") %>%
filter(Region == "Americas") %>%
filter(Destination.Country != "" & Destination.Country != "Unknown")
runApp()
?map
runApp()
?map
runApp()
runApp()
?inputPanel
runApp()
#summarydata
summary.data <- unique(final.data[, c('Drug.Name', 'Region' ,'Country.obtained...Departure.Country', 'Destination.Country', 'long.country.obtained','lat.country.obtained','long.destination.country', 'lat.destination.country')])
write.csv(summary.data, file = "summary.data.csv")
runApp()
runApp()
stop()
summary.data <- read.csv("summary.data.csv", stringsAsFactors = FALSE)
library(dplyr)
library(plotly)
library(maps)
library(shiny)
summary.data <- read.csv("summary.data.csv", stringsAsFactors = FALSE)
shinyServer(function(input, output) {
output$map <- renderPlot({
selected.data <- switch (input$Drug,
"Cocaine" = filter(summary.data, Drug.Name == "Cocaine"),
"Heroin"= filter(summary.data, Drug.Name == "Heroin"),
"Cannabis Herb (Marijuana)" = filter(summary.data, Drug.Name == "Cannabis Herb (Marijuana)")
)
selected.data <- switch(input$Region,
"Europe" = filter(selected.data, Region == "Europe"),
"Americas" = filter(selected.data, Region == "Americas"),
"Africa" = filter(selected.data, Region == "Africa"),
"Asia" = filter(selected.data, Region == "Asia")
)
map("world", regions= ".", mar = c(.5,.5,.5,.5))
points(x = selected.data$long.country.obtained, y = selected.data$lat.country.obtained, col = "red")
points(x =  selected.data$long.destination.country, y = selected.data$lat.destination.country, col = "red")
arrows(x0 = selected.data$long.country.obtained, y0 = selected.data$lat.country.obtained, x1 = selected.data$long.destination.country, y1 = selected.data$lat.destination.country, col = "red", lwd = .5)
})
})
library(shiny)
library(plotly)
#setwd("~/GitHub/drugs-visualization")
#drug.data <- read.csv('./data/2011-2015_Drug_data.csv', stringsAsFactors = FALSE)
summary.data <- read.csv("summary.data.csv", stringsAsFactors = FALSE)
shinyUI(navbarPage('Drug Distribution from 2011 to 2015',
tabPanel('Home-Lukas',
titlePanel('Map of Drug Trafficking Routes'),
sidebarLayout(
sidebarPanel(
radioButtons('Drug', 'Drug', choices = unique(summary.data$Drug.Name)),
selectInput('Region', 'Region', choices = unique(summary.data$Region))
),
mainPanel(
plotOutput("map")
)
)
),
tabPanel('Test2',
titlePanel('In progress'),
sidebarLayout(
sidebarPanel(
),
mainPanel(
)
)
)
))
runApp()
?group_by
?group_by
kilo.data <- filter(drug.data, Drug.Unit == 'Kilogram')
not.unknown.kilo <- filter(kilo.data, Country.obtained...Departure.Country != "" & Country.obtained...Departure.Country != "Unknown") %>%
filter(Region == "Americas") %>%
filter(Destination.Country != "" & Destination.Country != "Unknown")
View(not.unknown.kilo)
group_by(not.unknown.kilo, Country.obtained...Departure.Country, Destination.Country)
?summarize_each
group_by(not.unknown.kilo, Country.obtained...Departure.Country, Destination.Country) %>%
summarize_each(funs(sum()))
View(not.unknown.kilo)
group_by(not.unknown.kilo, Country.obtained...Departure.Country, Destination.Country) %>%
summarize_each(funs(sum(Amount)))
View(not.unknown.kilo)
runApp()
?map
runApp()
runApp()
View(not.unknown.kilo)
group_by(not.unknown.kilo,Drug.Name, Country.obtained...Departure.Country, Destination.Country) %>%
summarize_each(funs(sum(Amount)))
View(not.unknown.kilo)
